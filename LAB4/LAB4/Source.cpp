#include <stdio.h>
#include <locale.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define clear system("cls");

bool flag = false;

struct node {
	struct node* prev;
	struct node* next;
	char value;
};

struct list {
	struct node* current;
	struct node* first;
	struct node* last;
};

char tElem;

int checkNum(char chck[100]) {
	int i, length;
	length = strlen(chck);
	for (i = 0; i < length; i++) {
		if (!(isdigit(chck[i])))
			return 1;
	}
	return 0;
}

void init(struct list* list) {
	list->current = 0;
	list->first = 0;
	list->last = 0;
	flag = true;
	printf("ÑÏÈÑÎÊ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ!\n");
}

void checkVoid(struct list list) {
	if (list.current == 0) printf("ÑÏÈÑÎÊ ÏÓÑÒ\n");
	else printf("ÑÏÈÑÎÊ ÍÅ ÏÓÑÒ\n");
}

void print(struct list list) {
	struct node* currptr;
	if (list.current == 0) {
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
		return;
	}
	//ïğÿìîå íàïğàâëåíèå
	printf("ÏĞßÌÎÅ ÍÀÏĞÀÂËÅÍÈÅ: ");
	for (currptr = list.first; currptr != NULL; currptr = currptr->next) {
		if (currptr == list.current) {
			printf(">%c<", currptr->value);
			continue;
		}
		printf("%c", currptr->value);
	}
	printf("\n");
	//ğåâåğñ
	printf("ÎÁĞÀÒÍÎÅ ÍÀÏĞÀÂËÅÍÈÅ: ");
	for (currptr = list.last; currptr != NULL; currptr = currptr->prev) {
		if (currptr == list.current) {
			printf(">%c<", currptr->value);
			continue;
		}
		printf("%c", currptr->value);
	}
	printf("\n");
}

void setFirst(struct list* list) {
	if (list->current == 0) {
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
		return;
	}
	else list->current = list->first;
	print(*list);
}

void setLast(struct list* list) {
	if (list->current == 0) {
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
		return;
	}
	else list->current = list->last;
	print(*list);
}

void setToLeft(struct list* list) {
	if (list->current == 0) {
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
		return;
	}
	else {
		if (list->current == list->first) printf("ÏÅĞÅÄÂÈÍÓÒÜ ĞÓ ÂËÅÂÎ ÍÅÂÎÇÌÎÆÍÎ. ÏĞÈ×ÈÍÀ: ĞÓ Â ÍÀ×ÀËÅ ËÈÑÒÀ\n");
		else list->current = list->current->prev;
	}
	print(*list);
}

void setToRight(struct list* list) {
	if (list->current == 0) {
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
		return;
	}
	else {
		if (list->current == list->last) printf("ÏÅĞÅÄÂÈÍÓÒÜ ĞÓ ÂÏĞÀÂÎ ÍÅÂÎÇÌÎÆÍÎ. ÏĞÈ×ÈÍÀ: ĞÓ Â ÊÎÍÖÅ ËÈÑÒÀ\n");
		else list->current = list->current->next;
	}
	print(*list);
}

void checkFirst(struct list list) {
	if (list.current == 0) {
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
	}
	else {
		if (list.current == list.first) printf("ĞÓ == ÍÀ×ÀËÎ ÑÏÈÑÊÀ.\n");
		else printf("ĞÓ != ÍÀ×ÀËÎ ÑÏÈÑÊÀ.\n");
		print(list);
	}
}

void checkLast(struct list list) {
	if (list.current == 0) {
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
	}
	else {
		if (list.current == list.last) printf("ĞÓ == ÊÎÍÅÖ ÑÏÈÑÊÀ.\n");
		else printf("ĞÓ != ÊÎÍÅÖ ÑÏÈÑÊÀ.\n");
		print(list);
	}
}

void printToRight(struct list list) {
	if (list.current == 0) {//åñëè ëèñò ïóñò
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
		return;
	}
	else {
		if (list.current == list.last) printf("ĞÓ Â ÊÎÍÖÅ ËÈÑÒÀ. İËÅÌÅÍÒ ĞÓ: %c\n", list.current->value);
		else printf("İËÅÌÅÍÒ ÇÀ ĞÓ: %c\n", list.current->next->value);
	}
	print(list);
}

void printToLeft(struct list list) {
	if (list.current == 0) {//åñëè ëèñò ïóñò
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
		return;
	}
	else {
		if (list.current == list.first) printf("ĞÓ Â ÍÀ×ÀËÅ ËÈÑÒÀ. İËÅÌÅÍÒ ĞÓ: %c\n", list.current->value);
		else printf("İËÅÌÅÍÒ ÄÎ ĞÓ: %c\n", list.current->prev->value);
	}
	print(list);
}

void takeLeft(struct list* list) {
	if (list->current == 0) {//åñëè ëèñò ïóñò
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
		return;
	}
	else {
		if (list->current != list->first) { //åñëè ĞÓ íå â íà÷àëå
			tElem = list->current->prev->value;
			if (list->current->prev == list->first) { // åñëè ĞÓ âî âòîğîé ÿ÷åéêå
				list->first = list->current;
				free(list->current->prev);
				list->current->prev = NULL;
			}
			else {
				list->current->prev = list->current->prev->prev;
				free(list->current->prev->next);
				list->current->prev->next = list->current;
			}
			printf("ÂÇßÒÛÉ İËÅÌÅÍÒ: %c\n", tElem);
		}
		else {
			tElem = list->current->value;
			if (list->first == list->last) { //åñëè ëèñò ñ îäíèì ıëåìåíòîì
				free(list->current);
				list->current = 0;
				list->first = 0;
				list->last = 0;
				printf("ËÈÑÒ ÑÒÀË ÏÓÑÒÛÌ. ÂÇßÒÛÉ İËÅÌÅÍÒ: %c\n", tElem);
				return;
			}
			//åñëè ĞÓ â íà÷àëå
			else printf("ĞÓ Â ÍÀ×ÀËÅ ËÈÑÒÀ, ÂÇßÒÜ İËÅÌÅÍÒ ÍÅÂÎÇÌÎÆÍÎ.\n");
		}
	}
	print(*list);
}

void takeRight(struct list* list) {
	if (list->current == 0) {//åñëè ëèñò ïóñò
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
		return;
	}
	else {
		if (list->current != list->last) { //åñëè ĞÓ íå â êîíöå
			tElem = list->current->next->value;
			if (list->current->next == list->last) { // åñëè ĞÓ â ïğåäïîñëåäíåé ÿ÷åéêå
				list->last = list->current;
				free(list->current->next);
				list->current->next = NULL;
			}
			else {
				list->current->next = list->current->next->next;
				free(list->current->next->prev);
				list->current->next->prev = list->current;
			}
			printf("ÂÇßÒÛÉ İËÅÌÅÍÒ: %c\n", tElem);
		}
		else {
			tElem = list->current->value;
			if (list->first == list->last) { //åñëè ëèñò ñ îäíèì ıëåìåíòîì
				free(list->current);
				list->current = 0;
				list->first = 0;
				list->last = 0;
				printf("ËÈÑÒ ÑÒÀË ÏÓÑÒÛÌ. ÂÇßÒÛÉ İËÅÌÅÍÒ %c\n", tElem);
				return;
			}
			//åñëè ĞÓ â êîíöå
			else printf("ĞÓ Â ÊÎÍÖÅ ËÈÑÒÀ, ÂÇßÒÜ İËÅÌÅÍÒ ÍÅÂÎÇÌÎÆÍÎ. \n");
		}
	}
	print(*list);
}

void changeLeft(struct list* list, char elem) {
	if (list->current == list->first) printf("ĞÓ Â ÍÀ×ÀËÅ ËÈÑÒÀ. ÇÍÀ×ÅÍÈÅ ĞÓ ÈÇÌÅÍÈËÎÑÜ: %c\n", list->current->value = elem);
	else list->current->prev->value = elem;
	print(*list);
}

void changeRight(struct list* list, char elem) {
	if (list->current == list->last) printf("ĞÓ Â ÊÎÍÖÅ ËÈÑÒÀ. ÇÍÀ×ÅÍÈÅ ĞÓ ÈÇÌÅÍÈËÎÑÜ: %c\n", list->current->value = elem);
	else list->current->next->value = elem;
	print(*list);
}

void delToLeft(struct list* list) {
	if (list->current == 0) {//åñëè ëèñò ïóñò
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
		return;
	}
	else {
		if (list->current != list->first) { //åñëè ĞÓ íå â êîíöå
			if (list->current->prev == list->first) { // åñëè ĞÓ â ïğåäïîñëåäíåé ÿ÷åéêå
				list->first = list->current;
				free(list->current->prev);
				list->current->prev = NULL;
			}
			else {
				list->current->prev = list->current->prev->prev;
				free(list->current->prev->next);
				list->current->prev->next = list->current;
			}
		}
		else {
			if (list->first == list->last) { //åñëè ëèñò ñ îäíèì ıëåìåíòîì
				free(list->current);
				list->current = 0;
				list->first = 0;
				list->last = 0;
				printf("ËÈÑÒ ÑÒÀË ÏÓÑÒÛÌ.\n");
				return;
			}
			//åñëè ĞÓ â íà÷àëå
			else printf("ĞÓ Â ÍÀ×ÀËÅ ËÈÑÒÀ, ÓÄÀËÅÍÈÅ ÍÅÂÎÇÌÎÆÍÎ. \n\n");
		}
	}
	print(*list);
}

void delToRight(struct list* list) {
	if (list->current == 0) {//åñëè ëèñò ïóñò
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
		return;
	}
	else {
		if (list->current != list->last) { //åñëè ĞÓ íå â êîíöå
			if (list->current->next == list->last) { // åñëè ĞÓ â ïğåäïîñëåäíåé ÿ÷åéêå
				list->last = list->current;
				free(list->current->next);
				list->current->next = NULL;
			}
			else {
				list->current->next = list->current->next->next;
				free(list->current->next->prev);
				list->current->next->prev = list->current;
			}
		}
		else {
			if (list->first == list->last) { //åñëè ëèñò ñ îäíèì ıëåìåíòîì
				free(list->current);
				list->current = 0;
				list->first = 0;
				list->last = 0;
				printf("ËÈÑÒ ÑÒÀË ÏÓÑÒÛÌ.\n");
				return;
			}
			//åñëè ĞÓ â êîíöå
			else printf("ĞÓ Â ÊÎÍÖÅ ËÈÑÒÀ, ÓÄÀËÅÍÈÅ ÍÅÂÎÇÌÎÆÍÎ. \n\n");
		}
	}
	print(*list);
}

//4 ÑËÓ×Àß: 1) ÊÎÃÄÀ ËÈÑÒ ÏÓÑÒ 2) ÊÎÃÄÀ ĞÓ ÍÅ ÊĞÀÉÍÈÉ 3.1) ÊÎÃÄÀ ĞÓ Â ÍÀ×ÀËÅ 3.2) ÊÎÃÄÀ ĞÓ Â ÊÎÍÖÅ
void addToLeft(struct list* list, char elem) {
	struct node* newNode = (struct node*)malloc(sizeof(struct node));
	newNode->value = elem;
	if (list->current == 0) { //åñëè ëèñò ïóñò
		newNode->next = 0;
		newNode->prev = 0;
		list->first = list->last = list->current = newNode;
	}
	else {
		if (list->current != list->first) { //åñëè ĞÓ íå â íà÷àëå
			newNode->prev = list->current->prev;
			newNode->next = list->current;
			list->current->prev->next = newNode;
			list->current->prev = newNode;
		}
		else { //åñëè ĞÓ â íà÷àëå
			newNode->next = list->current;
			newNode->prev = NULL;
			list->current->prev = newNode;
			list->first = newNode;
		}
	}
	print(*list);
}

void addToRight(struct list* list, char elem) {
	struct node* newNode = (struct node*)malloc(sizeof(struct node));
	newNode->value = elem;
	if (list->current == 0) { //åñëè ëèñò ïóñò
		newNode->next = 0;
		newNode->prev = 0;
		list->first = list->last = list->current = newNode;
	}
	else {
		if (list->current != list->last) { //åñëè ĞÓ íå â êîíöå
			newNode->prev = list->current;
			newNode->next = list->current->next;
			list->current->next->prev = newNode;
			list->current->next = newNode;
		}
		else { //åñëè ĞÓ â êîíöå
			newNode->prev = list->current;
			newNode->next = NULL;
			list->current->next = newNode;
			list->last = newNode;
		}
	}
	print(*list);
}

void clearList(struct list* list) {
	if (list->current == 0) {//åñëè ëèñò ïóñò
		printf("ÎØÈÁÊÀ! ËÈÑÒ ÓÆÅ ÏÓÑÒ.\n");
		return;
	}
	else {
		if (list->current == list->first && list->current == list->last) {
			free(list->current);
			list->current = list->first = list->last = 0;
		}
		else {
			for (list->current = list->last->prev; list->current != list->first; list->current = list->current->prev) free(list->current->next);
			free(list->current);
			list->current = list->first = list->last = 0;
		}
	}
	printf("Î×ÈÑÒÊÀ ÏĞÎØËÀ ÓÑÏÅØÍÎ \n");
}

void deleteList(struct list* list) {
	if (list->current == 0 || (list->current == list->first && list->current == list->last)) {
		free(list->current);
		flag = false;
		printf("ĞÀÁÎÒÀ ÑÎ ÑÏÈÑÊÎÌ ÇÀÊÎÍ×ÅÍÀ.\n");
		return;
	}
	for (list->current = list->first->next; list->current != list->last; list->current = list->current->next) free(list->current->prev);
	free(list->current);
	flag = false;
	printf("ĞÀÁÎÒÀ ÑÎ ÑÏÈÑÊÎÌ ÇÀÊÎÍ×ÅÍÀ.\n");
}

void menu() {
	printf("ÌÅÍŞ:\n");
	printf("1) ÍÀ×ÀÒÜ ĞÀÁÎÒÓ\n"); // DONE
	printf("2) ÑÄÅËÀÒÜ ÑÏÈÑÎÊ ÏÓÑÒÛÌ\n"); // DONE
	printf("3) ÏĞÎÂÅĞÊÀ ÍÀ ÏÓÑÒÎÒÓ\n"); // DONE
	printf("4) ÓÑÒÀÍÎÂÊÀ ĞÓ Â ÍÀ×ÀËÎ ÑÏÈÑÊÀ\n"); // DONE
	printf("5) ÓÑÒÀÍÎÂÊÀ ĞÓ Â ÊÎÍÅÖ ÑÏÈÑÊÀ\n"); // DONE
	printf("6) ÏĞÎÂÅĞÊÀ: ĞÓ == ÍÀ×ÀËÎ ÑÏÈÑÊÀ \n"); // DONE
	printf("7) ÏĞÎÂÅĞÊÀ: ĞÓ == ÊÎÍÅÖ ÑÏÈÑÊÀ\n"); // DONE
	printf("8) ÏÅĞÅÄÂÈÍÓÒÜ ĞÓ ÂÏĞÀÂÎ\n"); // DONE
	printf("9) ÏÅĞÅÄÂÈÍÓÒÜ ĞÓ ÂËÅÂÎ\n"); // DONE
	printf("10) ÏÎÊÀÇÀÒÜ ÇÍÀ×ÅÍÈÅ İËÅÌÅÍÒÀ ÄÎ ĞÓ\n"); // DONE
	printf("11) ÏÎÊÀÇÀÒÜ ÇÍÀ×ÅÍÈÅ İËÅÌÅÍÒÀ ÇÀ ĞÓ\n"); // DONE
	printf("12) ÓÄÀËÈÒÜ İËÅÌÅÍÒÀ ÄÎ ĞÓ\n"); // DONE
	printf("13) ÓÄÀËÈÒÜ İËÅÌÅÍÒÀ ÇÀ ĞÓ\n"); // DONE
	printf("14) ÂÇßÒÜ İËÅÌÅÍÒ ÄÎ ĞÓ\n");
	printf("15) ÂÇßÒÜ İËÅÌÅÍÒ ÇÀ ĞÓ\n");
	printf("16) ÈÇÌÅÍÈÒÜ ÇÍÀ×ÅÍÈÅ İËÅÌÅÍÒÀ ÄÎ ĞÓ\n");
	printf("17) ÈÇÌÅÍÈÒÜ ÇÍÀ×ÅÍÈÅ İËÅÌÅÍÒÀ ÇÀ ĞÓ\n");
	printf("18) ÄÎÁÀÂÈÒÜ İËÅÌÅÍÒ ÄÎ ĞÓ\n"); // DONE. ÑÄÅËÀÉ ÏĞÎÂÅĞÊÓ ÍÀ ÄËÈÍÓ ÂÂÎÄÀ
	printf("19) ÄÎÁÀÂÈÒÜ İËÅÌÅÍÒ ÇÀ ĞÓ\n"); // DONE
	printf("20) ĞÀÑÏÅ×ÀÒÀÒÜ ÑÏÈÑÎÊ\n"); // DONE
	printf("21) ÇÀÊÎÍ×ÈÒÜ ĞÀÁÎÒÓ ÑÎ ÑÏÈÑÊÎÌ\n"); // ×ÀÑÒÈ×ÍÎ ÃÎÒÎÂÎ
	printf("22) ÇÀÊÎÍ×ÈÒÜ ĞÀÁÎÒÓ Ñ ÏĞÎÃĞÀÌÌÎÉ\n"); // DONE
	printf("ÂÂÅÄÈÒÅ ÊÎÌÀÍÄÓ: ");
}

int main() {
	setlocale(LC_ALL, "ru");
	char choice[100];
	char c;
	int ch;
	struct list list;
	while (1) {
		menu();
		gets_s(choice);
		if (checkNum(choice)) {
			clear;
			printf("ÂÂÅÄÈ ÍÎĞÌ ÊÎÌÀÍÄÓ, ÏÎÆÀËÓÉÑÒÀ\n");
			continue;
		}
		ch = atoi(choice);
		clear;
		switch (ch) {
		case 1:
			if (!flag) init(&list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÓÆÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 2:
			if (flag) clearList(&list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 3:
			if (flag) checkVoid(list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 4:
			if (flag) setFirst(&list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 5:
			if (flag) setLast(&list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 6:
			if (flag) checkFirst(list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 7:
			if (flag) checkLast(list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 8:
			if (flag) setToRight(&list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 9:
			if (flag) setToLeft(&list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 10:
			if (flag) printToLeft(list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 11:
			if (flag) printToRight(list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 12:
			if (flag) delToLeft(&list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 13:
			if (flag) delToRight(&list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 14:
			if (flag) takeLeft(&list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 15:
			if (flag) takeRight(&list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 16:
			if (flag) {
				if (list.current == 0) {//åñëè ëèñò ïóñò
					printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
					continue;
				}
				else {
					while (1) {
						printf("ÂÂÅÄÈÒÅ ÑÈÌÂÎË: ");
						gets_s(choice);
						clear;
						if (strlen(choice) == 1) break;
						else printf("ÂÂÎÄ ÏĞÅÂÛØÀÅÒ ÄËÈÍÓ. ÏÎÆÀËÓÉÑÒÀ ÂÂÅÄÈÒÅ ÒÎËÜÊÎ ÎÄÈÍ ÑÈÌÂÎË!!!\n");
					}
					c = choice[0];
					changeLeft(&list, c);
				}
			}
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 17:
			if (flag) {
				if (list.current == 0) {//åñëè ëèñò ïóñò
					printf("ÎØÈÁÊÀ! ËÈÑÒ ÏÓÑÒ.\n");
					continue;
				}
				else {
					while (1) {
						printf("ÂÂÅÄÈÒÅ ÑÈÌÂÎË: ");
						gets_s(choice);
						clear;
						if (strlen(choice) == 1) break;
						else printf("ÂÂÎÄ ÏĞÅÂÛØÀÅÒ ÄËÈÍÓ. ÏÎÆÀËÓÉÑÒÀ ÂÂÅÄÈÒÅ ÒÎËÜÊÎ ÎÄÈÍ ÑÈÌÂÎË!!!\n");
					}
					c = choice[0];
					changeRight(&list, c);
				}
			}
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 18:
			if (flag) {
				while (1) {
					printf("ÂÂÅÄÈÒÅ ÑÈÌÂÎË: ");
					gets_s(choice);
					clear;
					if (strlen(choice) == 1) break;
					else printf("ÂÂÎÄ ÏĞÅÂÛØÀÅÒ ÄËÈÍÓ. ÏÎÆÀËÓÉÑÒÀ ÂÂÅÄÈÒÅ ÒÎËÜÊÎ ÎÄÈÍ ÑÈÌÂÎË!!!\n");
				}
				c = choice[0];
				addToLeft(&list, c);
			}
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 19:
			if (flag) {
				while (1) {
					printf("ÂÂÅÄÈÒÅ ÑÈÌÂÎË: ");
					gets_s(choice);
					clear;
					if (strlen(choice) == 1) break;
					else printf("ÂÂÎÄ ÏĞÅÂÛØÀÅÒ ÄËÈÍÓ. ÏÎÆÀËÓÉÑÒÀ ÂÂÅÄÈÒÅ ÒÎËÜÊÎ ÎÄÈÍ ÑÈÌÂÎË!!!\n");
				}
				c = choice[0];
				addToRight(&list, c);
			}
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 20:
			if (flag) print(list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 21:
			if (flag) deleteList(&list);
			else printf("ÂÛÏÎËÍÈÒÜ ÊÎÌÀÍÄÓ ÍÅÂÎÇÌÎÆÍÎ. ËÈÑÒ ÍÅ ÈÍÈÖÈÀËÈÇÈĞÎÂÀÍ.\n");
			break;
		case 22:
			printf("ÂÇßÒÛÉ İËÅÌÅÍÒ: %c\n", tElem);
			printf("ÇÀÂÅĞØÅÍÈÅ ÏĞÎÃĞÀÌÌÛ");
			return 0;
		default:
			printf("ÒÀÊÎÉ ÊÎÌÀÍÄÛ ÍÅ ÑÓÙÅÑÒÂÓÅÒ. ÏÎÆÀËÓÉÑÒÀ, ÂÂÅÄÈÒÅ ÊÎÌÀÍÄÓ ÑÍÎÂÀ.\n");
		}
	}
}